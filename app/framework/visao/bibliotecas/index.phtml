<section id="bibliotecas">

    <div class="container wow fadeInUp">

        <div class="row">

            <div class="col-md-12">

                <h3 class="section-title">Bibliotecas</h3>

                <div class="section-title-divider"></div>

                <p class="section-description">

                    As bibliotecas são classes de programação orientadas a objetos (POO) preparadas para realizar tarefas típicas no desenvolvimento web. Essas bibliotecas são mais especializadas em um tema particular. <br>
                    Podemos dizer que as bibliotecas são um dos componentes que economizarão tempo na hora do desenvolvimento.

                </p>

            </div>

        </div>

    </div>

    <div class="container wow fadeInUp">

        <div class="row">

            <div class="col-md-3">

                <div class="menu-lateral">

                    <button

                        type="button"
                        class="btn btn-gu"
                        ng-class="{'active': bli.carregando}"
                        ng-click="altera( 'carregando', 'bli' )"

                    >Carregando biblioteca</button>

                    <button

                        type="button"
                        class="btn btn-gu mar-top10"
                        ng-class="{'active': bli.automatico}"
                        ng-click="altera( 'automatico', 'bli' )"

                    >Carregamento automático</button>

                </div>

            </div>

            <div class="col-md-9 bibliotecas-content conteudo-lateral" ng-if="bli.carregando">

                <h2 class="bibliotecas-title">Carregamento de Bibliotecas</h2>

                <p class="primeirospassos-text">

                    O carregamento das bibliotecas são bem simples, dentro do seu modelo e/ou controlador, basta estar utilizando: <code>$this->load->biblioteca();</code> e no mesmo você estará passando o nome da sua biblioteca. Por exemplo: <br>
                    Tenho uma biblioteca chamada: <code>obter_users.php</code>, basta então chamar: <code>$this->load->biblioteca("obter_users");</code> <br><br>

                    Para a criação de uma biblioteca chamada <code>obter_users.php</code> que será carregada dentro do modelo e/ou controlador, é preciso estar criando da seguinde maneira! <br><br>

                    <?php

                        highlight_string('<?php

    class GU_obter_users extends GU_Model{

        // Seus métodos

    }

?>');

                    ?> <br><br>

                    Quando você coloca <code>extends GU_Model</code>, ele estará herdando todos os métodos do modelo principal, com isso é possível fazer conexão com banco de dados e carregar os ajudantes. <br><br>
                    Para utilizar os métodos, basta colocar: <code>$this->obter_users->metodo();</code>.

                </p>

            </div>

            <div class="col-md-9 bibliotecas-content conteudo-lateral" ng-if="bli.automatico">

                <h2 class="bibliotecas-title">Carregamento Automático de Bibliotecas</h2>

                <p class="primeirospassos-text">

                    O carregamento automático parte do arquivo <code>autocarregamento.php</code> que se encontra em <code>suaaplicacao/app/aplicacao/config/autocarregamento.php</code>, nele você encontrará <code>$autocarregar['ajudante'] = array();</code> e <code>$autocarregar['biblioteca'] = array();</code>, para realizar o autocarregamento da biblioteca, basta passar o nome dela no array, por exemplo: <code>$autocarregar['biblioteca'] = array("obter_users");</code>, a diferença entra no modo de criar a biblioteca, veja a seguir: <br><br>

                    <?php

                        highlight_string('<?php

    class GU_obter_users{

        // Cria uma propriedade protegida chamada GU de Guepardo.
        protected $GU;

        /*
        * Método construtor, que recupera do o objeto,
        * sendo possível trabalhar com banco de dados, carregar ajudantes e bibliotecas
        */
        public function __construct(){

            $this->GU =& obter_instancia();
            return $this;

        }

        // Seus métodos

    }

?>');

                    ?> <br><br>

                    Como pode ser observado no código acima, é criado uma propriedade protegida, para usar atribuir uma instancia de todo o objeto. Já no construct ele atribui toda a instancia do framework na propriedade <code>GU</code>, onde com isso você estará tendo acesso ao banco de dados por exemplo, veja outro exemplo abaixo. <br><br>

                    <?php

                        highlight_string('<?php

    class GU_obter_users{

        // Cria uma propriedade protegida chamada GU de Guepardo.
        protected $GU;

        /*
        * Método construtor, que recupera do o objeto,
        * sendo possível trabalhar com banco de dados e carregar ajudantes.
        */
        public function __construct(){

            $this->GU =& obter_instancia();
            return $this;

        }


        //------------------------------------------------------------


        // Recupera usuarios
        public function getUsers(){

            // Carrega toda a instancia do banco de dados
            $this->GU->load->bancodedados();

            // Conecta na tabela
            $this->GU->bd->tabela="usuarios";

        }

    }

?>');

                    ?> <br><br>

                    Para utilizar os métodos, basta colocar: <code>$this->obter_users->metodo();</code>. <br><br>

                    <span class="text-muted font12">Lembrando que a propriedade protegida <code>GU</code>, pode ser qualquer nome, desde que você utilize em toda a sua biblioteca!</span>

                </p>

            </div>

        </div>

    </div>

</section>