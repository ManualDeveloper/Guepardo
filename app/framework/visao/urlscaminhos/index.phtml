<section id="urlscaminhos">

    <div class="container wow fadeInUp">

        <div class="row">

            <div class="col-md-12">

                <h3 class="section-title">Configuração do Banco de Dados</h3>

                <div class="section-title-divider"></div>

            </div>

        </div>

    </div>

    <div class="container wow fadeInUp">

        <div class="row">

            <div class="col-md-3">

                <div class="menu-lateral">

                    <button

                        type="button"
                        class="btn btn-gu"
                        ng-class="{'active': urlca.caminho}"
                        ng-click="altera( 'caminho', 'urlca' )"

                    >Caminhos</button>

                    <button

                        type="button"
                        class="btn btn-gu mar-top10"
                        ng-class="{'active': urlca.url}"
                        ng-click="altera( 'url', 'urlca' )"

                    >Urls</button>

                </div>

            </div>

            <div class="col-md-9 urlscaminhos-content conteudo-lateral" ng-if="urlca.caminho">

                <h2 class="urlscaminhos-title">Caminhos</h2>

                <p class="urlscaminhos-text">

                    O Guepardo possue 2 constantes de caminho, <code>PATCH_SYSTEM</code> e <code>APP_PATCH</code>. <br>

                    O <code>PATCH_SYSTEM</code> é o caminho absoluto do sistema e o <code>APP_PATCH</code> é o caminho absoluto da aplicação, ambos estão presente em todo o scope do projeto. <br><br>

                    Para chamar basta por exemplo: <br><br>

                    <?php

                        highlight_string('<?php

    echo PATCH_SYSTEM . "<br><br>" . APP_PATCH;

?>');

                    ?>

                </p>

            </div>

            <div class="col-md-9 urlscaminhos-content conteudo-lateral" ng-if="urlca.url">

                <h2 class="urlscaminhos-title">Urls</h2>

                <p class="urlscaminhos-text">

                    O framework trabalha com url amigáveis, a além disso é possível recuperar os parametros passados na url de forma simples. <br>
                    
                    Vamos supor que sua url esteja assim: <code>http://minhaaplicacao/cliente/index/idade/20</code> <br><br>

                    - <code>cliente</code> = controlador <br><br>

                    - <code>index</code> = ação <br><br>

                    - <code>idade</code> = indice do parametro <br><br>

                    - <code>20</code> = valor do indice idade <br><br>

                    Tudo que for passado após a ação é chamado como parametros e o mesmo pode ser recuperado das seguintes formas: <br><br>

                    - <code>$this->url->getParametro()</code>: É esperado o indice que deseja recuperar. <br><br>

                    - <code>$this->url->getParametros()</code>: É retornado todos os parametros. <br><br>

                    - <code>$this->url->getstringParametros()</code>: Espara o indice ao qual quer recuperar ou recupera a string completa dos parametros. <br><br>

                    - <code>$this->url->addParametro()</code>: Adiciona um parametro na matriz, é esperado passar um parametro e o valor desse parametro. <br><br>

                    - <code>$this->url->delParametro()</code>: Remove um determinado parametro, ele esperado que passe o parametro. <br><br>

                    - <code>$this->router->controlador</code>: Recupera o controlador atual. <br><br>

                    - <code>$this->router->acao</code>: Recupera a ação atual.

                </p>

            </div>

        </div>

    </div>

</section>